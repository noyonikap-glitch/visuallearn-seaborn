Metadata-Version: 2.4
Name: visuallearn
Version: 0.2.0
Summary: A Python library for visualizing ML model learning patterns and decision boundaries in real-time
Home-page: https://github.com/noyonika/visuallearn
Author: Noyonika Puram
Author-email: Noyonika Puram <noyonika.puram@example.com>
License: MIT License
        
        Copyright (c) 2024 Noyonika Puram
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/noyonikap-glitch/visuallearn
Project-URL: Bug Reports, https://github.com/noyonikap-glitch/visuallearn/issues
Project-URL: Source, https://github.com/noyonikap-glitch/visuallearn
Project-URL: Documentation, https://github.com/noyonikap-glitch/visuallearn#readme
Keywords: machine learning,visualization,decision boundaries,neural networks,deep learning,education
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Education
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Visualization
Classifier: Topic :: Education
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: numpy>=1.18.0
Requires-Dist: scikit-learn>=0.23.0
Requires-Dist: imageio>=2.8.0
Requires-Dist: Pillow>=7.0.0
Provides-Extra: pytorch
Requires-Dist: torch>=1.6.0; extra == "pytorch"
Provides-Extra: video
Requires-Dist: imageio[ffmpeg]; extra == "video"
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.10.0; extra == "dev"
Requires-Dist: black>=21.0.0; extra == "dev"
Requires-Dist: flake8>=3.8.0; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: all
Requires-Dist: torch>=1.6.0; extra == "all"
Requires-Dist: imageio[ffmpeg]; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# 🧠 VisualLearn

A lightweight, intuitive tool for **visualizing how machine learning models learn in real time.**  
For **education**, **debugging**, **content creation**, or just understanding the working under the hood.

---

## What It Does

- ✅ Visualizes **decision boundaries** as they evolve
- 📉 Plots **loss curves** in real time
- 🔬 Tracks **activation distributions** per layer
- 🔁 Shows **gradient histograms** during backpropagation
- 🎞️ Exports training as **GIF or MP4**

---

## Currently Supports

- 🧠 **PyTorch** (MLPs with `nn.Linear`, `nn.ReLU`)
- 🔢 **scikit-learn** classifiers with `.fit()` and `.predict()`
- 📐 2D input datasets (e.g., `make_moons`, `make_circles`)
- 🆚 Side-by-side comparison of **multiple models** learning the same dataset
- 🎨 Manual or modular plotting (works with any `matplotlib` figure or axes)

---

## Future Plans

- 🖼️ Visualizing **CNN feature maps** and filters
- 🔗 Support for **Transformers, RNNs, and custom activations**
- 🧱 Visualizing **weight updates** and **dead neurons**
- 📁 Integration with **experiment tracking** tools (e.g., Weights & Biases, TensorBoard)
- 🎯 CLI and web export (`mlvis run demo --gif`)

---

## Use Cases

- 🏫 Teaching machine learning concepts visually
- 📊 Debugging model behavior, layer by layer
- 🎞️ Creating demos for presentations, lectures, or social media
- 🧪 Comparing architectures (e.g., shallow vs deep MLPs)
- 🔬 Observing **gradient flow**, **activation saturation**, and more

---

## Installation

### Basic Installation
```bash
pip install visuallearn
```

### With Optional Dependencies
```bash
# For PyTorch support
pip install visuallearn[pytorch]

# For video export (MP4)
pip install visuallearn[video]

# For development
pip install visuallearn[dev]

# Everything included
pip install visuallearn[all]
```

### From Source
```bash
git clone https://github.com/noyonika/visuallearn.git
cd visuallearn
pip install -e .
```

## 🚀 Quick Start

```python
import visuallearn as vl
from sklearn.datasets import make_moons
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler

# Generate data
X, y = make_moons(n_samples=300, noise=0.3, random_state=42)
X = StandardScaler().fit_transform(X)

# Train model
model = SVC(kernel='rbf', probability=True)
model.fit(X, y)

# Visualize decision boundary
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(8, 6))
vl.plot_decision_boundary(model, X, y, ax)
plt.show()
```

### PyTorch Real-time Training Visualization

```python
import torch
import torch.nn as nn
import visuallearn as vl

# Your PyTorch model
model = nn.Sequential(
    nn.Linear(2, 16), nn.ReLU(),
    nn.Linear(16, 8), nn.ReLU(), 
    nn.Linear(8, 2)
)

# Set up tracking
activation_tracker = vl.ActivationTracker()
activation_tracker.attach_hooks(model)

# Create visualizer
visualizer = vl.CombinedPlotCoordinator(X, y, activation_tracker=activation_tracker)
visualizer.enable_recording()

# Training loop with live updates
for epoch in range(100):
    # ... your training code ...
    visualizer.update(model, epoch, loss_value)

# Export as GIF
visualizer.export("training.gif", format="gif")
```

